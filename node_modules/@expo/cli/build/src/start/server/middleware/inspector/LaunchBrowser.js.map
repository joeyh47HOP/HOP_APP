{"version":3,"sources":["../../../../../../src/start/server/middleware/inspector/LaunchBrowser.ts"],"sourcesContent":["import os from 'os';\n\nimport { LaunchBrowserTypes, type LaunchBrowserInstance } from './LaunchBrowser.types';\nimport LaunchBrowserImplLinux from './LaunchBrowserImplLinux';\nimport LaunchBrowserImplMacOS from './LaunchBrowserImplMacOS';\nimport LaunchBrowserImplWindows from './LaunchBrowserImplWindows';\n\nexport type { LaunchBrowserInstance };\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Launch a browser for JavaScript inspector\n */\nexport async function launchBrowserAsync(url: string): Promise<LaunchBrowserInstance> {\n  const browser = createBrowser();\n  const tempBrowserDir = await browser.createTempBrowserDir('expo-inspector');\n\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempBrowserDir}`,\n    '--no-first-run',\n    '--no-default-browser-check',\n  ];\n\n  for (const browserType of [LaunchBrowserTypes.CHROME, LaunchBrowserTypes.EDGE]) {\n    const isSupported = await browser.isSupportedBrowser(browserType);\n    if (isSupported) {\n      return browser.launchAsync(browserType, launchArgs);\n    }\n  }\n\n  throw new Error(\n    '[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nfunction createBrowser() {\n  if (os.platform() === 'darwin') {\n    return new LaunchBrowserImplMacOS();\n  }\n  if (os.platform() === 'win32' || IS_WSL) {\n    return new LaunchBrowserImplWindows();\n  }\n  if (os.platform() === 'linux') {\n    return new LaunchBrowserImplLinux();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}\n"],"names":["launchBrowserAsync","IS_WSL","require","url","browser","createBrowser","tempBrowserDir","createTempBrowserDir","launchArgs","browserType","LaunchBrowserTypes","CHROME","EDGE","isSupported","isSupportedBrowser","launchAsync","Error","os","platform","LaunchBrowserImplMacOS","LaunchBrowserImplWindows","LaunchBrowserImplLinux"],"mappings":"AAAA;;;;QAcsBA,kBAAkB,GAAlBA,kBAAkB;AAdzB,IAAA,GAAI,kCAAJ,IAAI,EAAA;AAE4C,IAAA,mBAAuB,WAAvB,uBAAuB,CAAA;AACnD,IAAA,uBAA0B,kCAA1B,0BAA0B,EAAA;AAC1B,IAAA,uBAA0B,kCAA1B,0BAA0B,EAAA;AACxB,IAAA,yBAA4B,kCAA5B,4BAA4B,EAAA;;;;;;AAIjE,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAACA,OAAO,CAAC,WAAW,CAAC,EAAE,AAAC;AAKrD,eAAeF,kBAAkB,CAACG,GAAW,EAAkC;IACpF,MAAMC,OAAO,GAAGC,aAAa,EAAE,AAAC;IAChC,MAAMC,cAAc,GAAG,MAAMF,OAAO,CAACG,oBAAoB,CAAC,gBAAgB,CAAC,AAAC;IAE5E,qGAAqG;IACrG,iEAAiE;IACjE,wEAAwE;IACxE,kEAAkE;IAClE,6FAA6F;IAC7F,2GAA2G;IAC3G,MAAMC,UAAU,GAAG;QACjB,CAAC,MAAM,EAAEL,GAAG,CAAC,CAAC;QACd,kCAAkC;QAClC,CAAC,gBAAgB,EAAEG,cAAc,CAAC,CAAC;QACnC,gBAAgB;QAChB,4BAA4B;KAC7B,AAAC;IAEF,KAAK,MAAMG,WAAW,IAAI;QAACC,mBAAkB,mBAAA,CAACC,MAAM;QAAED,mBAAkB,mBAAA,CAACE,IAAI;KAAC,CAAE;QAC9E,MAAMC,WAAW,GAAG,MAAMT,OAAO,CAACU,kBAAkB,CAACL,WAAW,CAAC,AAAC;QAClE,IAAII,WAAW,EAAE;YACf,OAAOT,OAAO,CAACW,WAAW,CAACN,WAAW,EAAED,UAAU,CAAC,CAAC;SACrD;KACF;IAED,MAAM,IAAIQ,KAAK,CACb,+HAA+H,CAChI,CAAC;CACH;AAED,SAASX,aAAa,GAAG;IACvB,IAAIY,GAAE,QAAA,CAACC,QAAQ,EAAE,KAAK,QAAQ,EAAE;QAC9B,OAAO,IAAIC,uBAAsB,QAAA,EAAE,CAAC;KACrC;IACD,IAAIF,GAAE,QAAA,CAACC,QAAQ,EAAE,KAAK,OAAO,IAAIjB,MAAM,EAAE;QACvC,OAAO,IAAImB,yBAAwB,QAAA,EAAE,CAAC;KACvC;IACD,IAAIH,GAAE,QAAA,CAACC,QAAQ,EAAE,KAAK,OAAO,EAAE;QAC7B,OAAO,IAAIG,uBAAsB,QAAA,EAAE,CAAC;KACrC;IACD,MAAM,IAAIL,KAAK,CAAC,2CAA2C,CAAC,CAAC;CAC9D"}