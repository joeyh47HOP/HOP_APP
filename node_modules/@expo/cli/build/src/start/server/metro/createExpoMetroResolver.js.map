{"version":3,"sources":["../../../../../src/start/server/metro/createExpoMetroResolver.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\nimport nodeResolve from 'resolve';\n\nimport { isNodeExternal } from './externals';\nimport { formatFileCandidates } from './formatFileCandidates';\nimport { CommandError } from '../../../utils/errors';\n\nclass FailedToResolvePathError extends Error {}\n\nclass ShimModuleError extends Error {}\n\nexport function createFastResolver({ preserveSymlinks }: { preserveSymlinks: boolean }) {\n  const cachedExtensions: Map<string, readonly string[]> = new Map();\n\n  function getAdjustedExtensions({\n    metroSourceExtensions,\n    platform,\n    isNative,\n  }: {\n    metroSourceExtensions: readonly string[];\n    platform: string | null;\n    isNative: boolean;\n  }): readonly string[] {\n    const key = JSON.stringify({ metroSourceExtensions, platform, isNative });\n    if (cachedExtensions.has(key)) {\n      return cachedExtensions.get(key)!;\n    }\n\n    let output = metroSourceExtensions;\n    if (platform) {\n      const nextOutput: string[] = [];\n\n      output.forEach((ext) => {\n        nextOutput.push(`${platform}.${ext}`);\n        if (isNative) {\n          nextOutput.push(`native.${ext}`);\n        }\n        nextOutput.push(ext);\n      });\n\n      output = nextOutput;\n    }\n\n    output = Array.from(new Set<string>(output));\n\n    // resolve expects these to start with a dot.\n    output = output.map((ext) => `.${ext}`);\n\n    cachedExtensions.set(key, output);\n\n    return output;\n  }\n\n  function fastResolve(\n    context: Pick<\n      ResolutionContext,\n      | 'unstable_enablePackageExports'\n      | 'customResolverOptions'\n      | 'sourceExts'\n      | 'preferNativePlatform'\n      | 'originModulePath'\n      | 'getPackage'\n      | 'nodeModulesPaths'\n      | 'mainFields'\n      | 'resolveAsset'\n    >,\n    moduleName: string,\n    platform: string | null\n  ): Resolution {\n    // TODO: Support extraNodeModules for tsconfig basePath support\n    // TODO: Support package exports import { resolve as resolveExports } from 'resolve.exports'\n    // TODO: Support `resolver.blockList`\n    if (context.unstable_enablePackageExports) {\n      throw new CommandError('package exports are not supported with EXPO_USE_FAST_RESOLVER=1');\n    }\n\n    const environment = context.customResolverOptions?.environment;\n    const isServer = environment === 'node';\n\n    const extensions = getAdjustedExtensions({\n      metroSourceExtensions: context.sourceExts,\n      platform,\n      isNative: context.preferNativePlatform,\n    });\n\n    let fp: string;\n\n    try {\n      fp = nodeResolve.sync(moduleName, {\n        basedir: path.dirname(context.originModulePath),\n        extensions,\n        // Used to ensure files trace to packages instead of node_modules in expo/expo. This is how Metro works and\n        // the app doesn't finish without it.\n        preserveSymlinks,\n        readPackageSync(readFileSync, pkgFile) {\n          return (\n            context.getPackage(pkgFile) ??\n            JSON.parse(\n              // @ts-expect-error\n              readFileSync(pkgfile)\n            )\n          );\n        },\n        moduleDirectory: context.nodeModulesPaths,\n        packageFilter(pkg) {\n          // set the pkg.main to the first available field in context.mainFields\n          for (const field of context.mainFields) {\n            if (\n              pkg[field] &&\n              // object-inspect uses browser: {} in package.json\n              typeof pkg[field] === 'string'\n            ) {\n              return {\n                ...pkg,\n                main: pkg[field],\n              };\n            }\n          }\n          return pkg;\n        },\n\n        pathFilter: isServer\n          ? undefined\n          : (pkg: any, _resolvedPath: string, relativePathIn: string): string => {\n              let relativePath = relativePathIn;\n              if (relativePath[0] !== '.') {\n                relativePath = `./${relativePath}`;\n              }\n\n              const replacements = pkg.browser;\n              if (replacements === undefined) {\n                return '';\n              }\n\n              // TODO: Probably use a better extension matching system here.\n              // This was added for `uuid/v4` -> `./lib/rng` -> `./lib/rng-browser.js`\n              const mappedPath = replacements[relativePath] ?? replacements[relativePath + '.js'];\n              if (mappedPath === false) {\n                throw new ShimModuleError();\n              }\n              return mappedPath;\n            },\n\n        // Not needed but added for parity...\n\n        // @ts-ignore\n        realpathSync: context.unstable_getRealPath,\n      });\n\n      if (!isServer && isNodeExternal(fp)) {\n        // In this case, mock the file to use an empty module.\n        return {\n          type: 'empty',\n        };\n      }\n    } catch (error: any) {\n      if (error instanceof ShimModuleError) {\n        return {\n          type: 'empty',\n        };\n      }\n\n      if ('code' in error && error.code === 'MODULE_NOT_FOUND') {\n        // TODO: Add improved error handling.\n        throw new FailedToResolvePathError(\n          'The module could not be resolved because no file or module matched the pattern:\\n' +\n            `  ${formatFileCandidates(\n              {\n                type: 'sourceFile',\n                filePathPrefix: moduleName,\n                candidateExts: extensions,\n              },\n              true\n            )}\\n\\n`\n        );\n      }\n      throw error;\n    }\n\n    if (context.sourceExts.some((ext) => fp.endsWith(ext))) {\n      return {\n        type: 'sourceFile',\n        filePath: fp,\n      };\n    } else {\n      // NOTE: platform extensions may not be supported on assets.\n\n      if (platform === 'web') {\n        // Skip multi-resolution on web/server bundles. Only consideration here is that\n        // we may still need it in case the only image is a multi-resolution image.\n        return {\n          type: 'assetFiles',\n          filePaths: [fp],\n        };\n      }\n\n      const dirPath = path.dirname(fp);\n      const extension = path.extname(fp);\n      const basename = path.basename(fp, extension);\n      return {\n        type: 'assetFiles',\n        // Support multi-resolution asset extensions...\n        filePaths: context.resolveAsset(dirPath, basename, extension) ?? [fp],\n      };\n    }\n  }\n\n  return fastResolve;\n}\n"],"names":["createFastResolver","FailedToResolvePathError","Error","ShimModuleError","preserveSymlinks","cachedExtensions","Map","getAdjustedExtensions","metroSourceExtensions","platform","isNative","key","JSON","stringify","has","get","output","nextOutput","forEach","ext","push","Array","from","Set","map","set","fastResolve","context","moduleName","unstable_enablePackageExports","CommandError","environment","customResolverOptions","isServer","extensions","sourceExts","preferNativePlatform","fp","nodeResolve","sync","basedir","path","dirname","originModulePath","readPackageSync","readFileSync","pkgFile","getPackage","parse","pkgfile","moduleDirectory","nodeModulesPaths","packageFilter","pkg","field","mainFields","main","pathFilter","undefined","_resolvedPath","relativePathIn","relativePath","replacements","browser","mappedPath","realpathSync","unstable_getRealPath","isNodeExternal","type","error","code","formatFileCandidates","filePathPrefix","candidateExts","some","endsWith","filePath","filePaths","dirPath","extension","extname","basename","resolveAsset"],"mappings":"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"}