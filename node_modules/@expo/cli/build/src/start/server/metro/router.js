"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAppRouterRelativeEntryPath = getAppRouterRelativeEntryPath;
exports.getRouterDirectoryModuleIdWithManifest = getRouterDirectoryModuleIdWithManifest;
exports.getRouterDirectoryWithManifest = getRouterDirectoryWithManifest;
exports.getRouterDirectory = getRouterDirectory;
exports.isApiRouteConvention = isApiRouteConvention;
exports.getApiRoutesForDirectory = getApiRoutesForDirectory;
exports.getRoutePaths = getRoutePaths;
var _chalk = _interopRequireDefault(require("chalk"));
var _glob = require("glob");
var _path = _interopRequireDefault(require("path"));
var _resolveFrom = _interopRequireDefault(require("resolve-from"));
var _log = require("../../../log");
var _dir = require("../../../utils/dir");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const debug = require("debug")("expo:start:server:metro:router");
function getAppRouterRelativeEntryPath(projectRoot, routerDirectory = getRouterDirectory(projectRoot)) {
    var ref;
    // Auto pick App entry
    const routerEntry = (ref = _resolveFrom.default.silent(projectRoot, "expo-router/entry")) != null ? ref : getFallbackEntryRoot(projectRoot);
    if (!routerEntry) {
        return undefined;
    }
    // It doesn't matter if the app folder exists.
    const appFolder = _path.default.join(projectRoot, routerDirectory);
    const appRoot = _path.default.relative(_path.default.dirname(routerEntry), appFolder);
    debug("expo-router entry", routerEntry, appFolder, appRoot);
    return appRoot;
}
/** If the `expo-router` package is not installed, then use the `expo` package to determine where the node modules are relative to the project. */ function getFallbackEntryRoot(projectRoot) {
    const expoRoot = _resolveFrom.default.silent(projectRoot, "expo/package.json");
    if (expoRoot) {
        return _path.default.join(_path.default.dirname(_path.default.dirname(expoRoot)), "expo-router/entry");
    }
    return _path.default.join(projectRoot, "node_modules/expo-router/entry");
}
function getRouterDirectoryModuleIdWithManifest(projectRoot, exp) {
    var ref, ref1;
    var ref2;
    return (ref2 = (ref = exp.extra) == null ? void 0 : (ref1 = ref.router) == null ? void 0 : ref1.unstable_src) != null ? ref2 : getRouterDirectory(projectRoot);
}
function getRouterDirectoryWithManifest(projectRoot, exp) {
    return _path.default.join(projectRoot, getRouterDirectoryModuleIdWithManifest(projectRoot, exp));
}
function getRouterDirectory(projectRoot) {
    // more specific directories first
    if ((0, _dir).directoryExistsSync(_path.default.join(projectRoot, "src/app"))) {
        _log.Log.log(_chalk.default.gray("Using src/app as the root directory for Expo Router."));
        return "src/app";
    }
    debug("Using app as the root directory for Expo Router.");
    return "app";
}
function isApiRouteConvention(name) {
    return /\+api\.[tj]sx?$/.test(name);
}
function getApiRoutesForDirectory(cwd) {
    return (0, _glob).sync("**/*+api.@(ts|tsx|js|jsx)", {
        cwd,
        absolute: true
    });
}
function getRoutePaths(cwd) {
    return (0, _glob).sync("**/*.@(ts|tsx|js|jsx)", {
        cwd
    }).map((p)=>"./" + normalizePaths(p)
    );
}
function normalizePaths(p) {
    return p.replace(/\\/g, "/");
}

//# sourceMappingURL=router.js.map