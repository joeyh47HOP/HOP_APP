{"version":3,"sources":["../../../../../src/start/server/metro/resolveFromProject.ts"],"sourcesContent":["import resolveFrom from 'resolve-from';\n\nconst debug = require('debug')('expo:metro:import');\n\n// These resolvers enable us to test the CLI in older projects.\n// We may be able to get rid of this in the future.\n// TODO: Maybe combine with AsyncResolver?\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means \"react-native\" is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nexport function importCliServerApiFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-server-api') {\n  return importFromProject(projectRoot, '@react-native-community/cli-server-api');\n}\n\nexport function importMetroSourceMapComposeSourceMapsFromProject(\n  projectRoot: string\n): typeof import('metro-source-map').composeSourceMaps {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\n\nexport function resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot: string, moduleId: string) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\n/** Import `metro` from the project. */\nexport function importMetroFromProject(projectRoot: string): typeof import('metro') {\n  return importFromProject(projectRoot, 'metro');\n}\nexport function importMetroServerFromProject(projectRoot: string): typeof import('metro').Server {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\nexport function importMetroCreateWebsocketServerFromProject(\n  projectRoot: string\n): typeof import('metro/src/lib/createWebsocketServer').createWebsocketServer {\n  return importFromProject(projectRoot, 'metro/src/lib/createWebsocketServer');\n}\nexport function importMetroHmrServerFromProject(\n  projectRoot: string\n): typeof import('metro/src/HmrServer').MetroHmrServer {\n  return importFromProject(projectRoot, 'metro/src/HmrServer');\n}\n\nexport function importExpoMetroConfig(projectRoot: string) {\n  return importFromProjectOrFallback<typeof import('@expo/metro-config')>(\n    projectRoot,\n    '@expo/metro-config'\n  );\n}\n\n/**\n * Attempt to use the local version of a module or fallback on the CLI version.\n * This should only ever happen when testing Expo CLI in development.\n */\nexport function importFromProjectOrFallback<TModule>(\n  projectRoot: string,\n  moduleId: string\n): TModule {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    debug(`requiring \"${moduleId}\" relative to the CLI`);\n    return require(require.resolve(moduleId));\n  }\n  debug(`requiring \"${moduleId}\" from the project:`, resolvedPath);\n  return require(resolvedPath);\n}\n\n/** Import `metro-resolver` from the project. */\nexport function importMetroResolverFromProject(\n  projectRoot: string\n): typeof import('metro-resolver') {\n  return importFromProject(projectRoot, 'metro-resolver');\n}\n\n/** Import `metro-inspector-proxy` from the project. */\nexport function importMetroInspectorProxyFromProject(\n  projectRoot: string\n): typeof import('metro-inspector-proxy') {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\n/** Import `metro-inspector-proxy/src/Device` from the project. */\nexport function importMetroInspectorDeviceFromProject(\n  projectRoot: string\n): typeof import('metro-inspector-proxy/src/Device') {\n  return importFromProject(projectRoot, 'metro-inspector-proxy/src/Device');\n}\n\n/**\n * Import the internal `saveAssets()` function from `react-native` for the purpose\n * of saving production assets as-is instead of converting them to a hash.\n */\nexport function importCliSaveAssetsFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-plugin-metro/build/commands/bundle/saveAssets').default {\n  return importFromProject(\n    projectRoot,\n    '@react-native-community/cli-plugin-metro/build/commands/bundle/saveAssets'\n  ).default;\n}\n\n/** Resolve the installed Metro version from project */\nexport function resolveMetroVersionFromProject(projectRoot: string): string {\n  return importFromProject(projectRoot, 'metro/package.json').version;\n}\n"],"names":["importCliServerApiFromProject","importMetroSourceMapComposeSourceMapsFromProject","resolveFromProject","importMetroFromProject","importMetroServerFromProject","importMetroCreateWebsocketServerFromProject","importMetroHmrServerFromProject","importExpoMetroConfig","importFromProjectOrFallback","importMetroResolverFromProject","importMetroInspectorProxyFromProject","importMetroInspectorDeviceFromProject","importCliSaveAssetsFromProject","resolveMetroVersionFromProject","debug","require","MetroImportError","Error","constructor","projectRoot","moduleId","importFromProject","resolvedPath","resolveFrom","silent","resolve","default","version"],"mappings":"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"}