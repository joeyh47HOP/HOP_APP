{"version":3,"sources":["../../../../../src/start/server/metro/waitForMetroToObserveTypeScriptFile.ts"],"sourcesContent":["import path from 'path';\n\nimport type { ServerLike } from '../BundlerDevServer';\n\nconst debug = require('debug')('expo:start:server:metro:waitForTypescript') as typeof console.log;\n\n/**\n * Use the native file watcher / Metro ruleset to detect if a\n * TypeScript file is added to the project during development.\n */\nexport function observeApiRouteChanges(\n  projectRoot: string,\n  runner: {\n    metro: import('metro').Server;\n    server: ServerLike;\n  },\n  callback: (filepath: string, operation: string) => Promise<void>\n): () => void {\n  const watcher = runner.metro.getBundler().getBundler().getWatcher();\n\n  const appDir = path.join(projectRoot, 'app');\n  const listener = ({\n    eventsQueue,\n  }: {\n    eventsQueue: {\n      filePath: string;\n      metadata?: {\n        type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n      } | null;\n      type: string;\n    }[];\n  }) => {\n    for (const event of eventsQueue) {\n      if (\n        // event.type === 'add' &&\n        // event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath) &&\n        event.filePath.startsWith(appDir)\n      ) {\n        const { filePath } = event;\n        callback(filePath, event.type);\n      }\n    }\n  };\n\n  watcher.addListener('change', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n  };\n\n  runner.server.addListener?.('close', off);\n  return off;\n}\n\n/**\n * Use the native file watcher / Metro ruleset to detect if a\n * TypeScript file is added to the project during development.\n */\nexport function waitForMetroToObserveTypeScriptFile(\n  projectRoot: string,\n  runner: {\n    metro: import('metro').Server;\n    server: ServerLike;\n  },\n  callback: () => Promise<void>\n): () => void {\n  const watcher = runner.metro.getBundler().getBundler().getWatcher();\n\n  const tsconfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  const listener = ({\n    eventsQueue,\n  }: {\n    eventsQueue: {\n      filePath: string;\n      metadata?: {\n        type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n      } | null;\n      type: string;\n    }[];\n  }) => {\n    for (const event of eventsQueue) {\n      if (\n        event.type === 'add' &&\n        event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath)\n      ) {\n        const { filePath } = event;\n        // Is TypeScript?\n        if (\n          // If the user adds a TypeScript file to the observable files in their project.\n          /\\.tsx?$/.test(filePath) ||\n          // Or if the user adds a tsconfig.json file to the project root.\n          filePath === tsconfigPath\n        ) {\n          debug('Detected TypeScript file added to the project: ', filePath);\n          callback();\n          off();\n          return;\n        }\n      }\n    }\n  };\n\n  debug('Waiting for TypeScript files to be added to the project...');\n  watcher.addListener('change', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n  };\n\n  runner.server.addListener?.('close', off);\n  return off;\n}\n\nexport function observeFileChanges(\n  runner: {\n    metro: import('metro').Server;\n    server: ServerLike;\n  },\n  files: string[],\n  callback: () => void | Promise<void>\n): () => void {\n  const watcher = runner.metro.getBundler().getBundler().getWatcher();\n\n  const listener = ({\n    eventsQueue,\n  }: {\n    eventsQueue: {\n      filePath: string;\n      metadata?: {\n        type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n      } | null;\n      type: string;\n    }[];\n  }) => {\n    for (const event of eventsQueue) {\n      if (\n        // event.type === 'add' &&\n        event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath)\n      ) {\n        const { filePath } = event;\n        // Is TypeScript?\n        if (files.includes(filePath)) {\n          debug('Observed change:', filePath);\n          callback();\n          return;\n        }\n      }\n    }\n  };\n\n  debug('Watching file changes:', files);\n  watcher.addListener('change', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n  };\n\n  runner.server.addListener?.('close', off);\n  return off;\n}\n"],"names":["observeApiRouteChanges","waitForMetroToObserveTypeScriptFile","observeFileChanges","debug","require","projectRoot","runner","callback","watcher","metro","getBundler","getWatcher","appDir","path","join","listener","eventsQueue","event","test","filePath","startsWith","type","addListener","off","removeListener","server","tsconfigPath","metadata","files","includes"],"mappings":"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"}