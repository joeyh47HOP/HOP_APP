{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { exportAssetsAsync, exportCssAssetsAsync } from './exportAssets';\nimport { unstable_exportStaticAsync } from './exportStaticAsync';\nimport { getVirtualFaviconAssetsAsync } from './favicon';\nimport { createBundlesAsync } from './fork-bundleAsync';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { persistMetroAssetsAsync } from './persistMetroAssets';\nimport { printBundleSizes } from './printBundleSizes';\nimport { Options } from './resolveOptions';\nimport {\n  writeAssetMapAsync,\n  writeBundlesAsync,\n  writeDebugHtmlAsync,\n  writeMetadataJsonAsync,\n  writeSourceMapsAsync,\n} from './writeContents';\nimport * as Log from '../log';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { copyAsync, ensureDirectoryAsync } from '../utils/dir';\nimport { env } from '../utils/env';\nimport { setNodeEnv } from '../utils/nodeEnv';\n\n/**\n * The structure of the outputDir will be:\n *\n * ```\n * ├── assets\n * │   └── *\n * ├── bundles\n * │   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n * │   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * └── metadata.json\n * ```\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    dumpSourcemap,\n    minify,\n  }: Pick<\n    Options,\n    'dumpAssetmap' | 'dumpSourcemap' | 'dev' | 'clear' | 'outputDir' | 'platforms' | 'minify'\n  >\n): Promise<void> {\n  setNodeEnv(dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const projectConfig = getConfig(projectRoot);\n  const exp = await getPublicExpoManifestAsync(projectRoot, {\n    // Web doesn't require validation.\n    skipValidation: platforms.length === 1 && platforms[0] === 'web',\n  });\n\n  const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n  const basePath = (exp.experiments?.basePath?.replace(/\\/+$/, '') ?? '').trim();\n\n  // Print out logs\n  if (basePath) {\n    Log.log();\n    Log.log(chalk.gray`Using (experimental) base path: ${basePath}`);\n    // Warn if not using an absolute path.\n    if (!basePath.startsWith('/')) {\n      Log.log(\n        chalk.yellow`  Base path does not start with a slash. Requests will not be absolute.`\n      );\n    }\n  }\n\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n\n  const outputPath = path.resolve(projectRoot, outputDir);\n  const staticFolder = outputPath;\n  const assetsPath = path.join(staticFolder, 'assets');\n  const bundlesPath = path.join(staticFolder, 'bundles');\n\n  await Promise.all([assetsPath, bundlesPath].map(ensureDirectoryAsync));\n\n  await copyPublicFolderAsync(publicPath, staticFolder);\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await createBundlesAsync(projectRoot, projectConfig, {\n    clear: !!clear,\n    platforms,\n    minify,\n    sourcemaps: dumpSourcemap,\n    // TODO: Breaks asset exports\n    // platforms: useServerRendering\n    //   ? platforms.filter((platform) => platform !== 'web')\n    //   : platforms,\n    dev,\n  });\n\n  const bundleEntries = Object.entries(bundles);\n  if (bundleEntries.length) {\n    // Log bundle size info to the user\n    printBundleSizes(\n      Object.fromEntries(\n        bundleEntries.map(([key, value]) => {\n          if (!dumpSourcemap) {\n            return [\n              key,\n              {\n                ...value,\n                // Remove source maps from the bundles if they aren't going to be written.\n                map: undefined,\n              },\n            ];\n          }\n\n          return [key, value];\n        })\n      )\n    );\n  }\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n  const { hashes, fileNames } = await writeBundlesAsync({\n    bundles,\n    useServerRendering,\n    outputDir: bundlesPath,\n  });\n\n  Log.log('Finished saving JS Bundles');\n\n  if (platforms.includes('web')) {\n    if (useServerRendering) {\n      await unstable_exportStaticAsync(projectRoot, {\n        outputDir: outputPath,\n        minify,\n        basePath,\n        includeMaps: dumpSourcemap,\n        // @ts-expect-error: server not on type yet\n        exportServer: exp.web?.output === 'server',\n      });\n      Log.log('Finished saving static files');\n    } else {\n      const cssLinks = await exportCssAssetsAsync({\n        outputDir,\n        bundles,\n        basePath,\n      });\n      let html = await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n        scripts: [`${basePath}/bundles/${fileNames.web}`],\n        cssLinks,\n      });\n      // Add the favicon assets to the HTML.\n      const modifyHtml = await getVirtualFaviconAssetsAsync(projectRoot, {\n        outputDir,\n        basePath,\n      });\n      if (modifyHtml) {\n        html = modifyHtml(html);\n      }\n      // Generate SPA-styled HTML file.\n      // If web exists, then write the template HTML file.\n      await fs.promises.writeFile(path.join(staticFolder, 'index.html'), html);\n    }\n\n    // TODO: Use a different mechanism for static web.\n    if (bundles.web) {\n      // Save assets like a typical bundler, preserving the file paths on web.\n      // TODO: Update React Native Web to support loading files from asset hashes.\n      await persistMetroAssetsAsync(bundles.web.assets, {\n        platform: 'web',\n        outputDirectory: staticFolder,\n        basePath,\n      });\n    }\n  }\n\n  // Can be empty during web-only SSG.\n  // TODO: Use same asset system across platforms again.\n  if (Object.keys(fileNames).length) {\n    const { assets } = await exportAssetsAsync(projectRoot, {\n      exp,\n      outputDir: staticFolder,\n      bundles,\n    });\n\n    if (dumpAssetmap) {\n      Log.log('Dumping asset map');\n      await writeAssetMapAsync({ outputDir: staticFolder, assets });\n    }\n    // build source maps\n    if (dumpSourcemap) {\n      Log.log('Dumping source maps');\n      await writeSourceMapsAsync({\n        bundles,\n        hashes,\n        outputDir: bundlesPath,\n        fileNames,\n      });\n\n      Log.log('Preparing additional debugging files');\n      // If we output source maps, then add a debug HTML file which the user can open in\n      // the web browser to inspect the output like web.\n      await writeDebugHtmlAsync({\n        outputDir: staticFolder,\n        fileNames,\n      });\n    }\n\n    // Generate a `metadata.json` and the export is complete.\n    await writeMetadataJsonAsync({ outputDir: staticFolder, bundles, fileNames });\n  }\n}\n\n/**\n * Copy the contents of the public folder into the output folder.\n * This enables users to add static files like `favicon.ico` or `serve.json`.\n *\n * The contents of this folder are completely universal since they refer to\n * static network requests which fall outside the scope of React Native's magic\n * platform resolution patterns.\n */\nasync function copyPublicFolderAsync(publicFolder: string, outputFolder: string) {\n  if (fs.existsSync(publicFolder)) {\n    await copyAsync(publicFolder, outputFolder);\n  }\n}\n"],"names":["exportAppAsync","Log","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","dumpSourcemap","minify","exp","setNodeEnv","require","load","projectConfig","getConfig","getPublicExpoManifestAsync","skipValidation","length","useServerRendering","includes","web","output","basePath","experiments","replace","trim","log","chalk","gray","startsWith","yellow","publicPath","path","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","staticFolder","assetsPath","join","bundlesPath","Promise","all","map","ensureDirectoryAsync","copyPublicFolderAsync","bundles","createBundlesAsync","sourcemaps","bundleEntries","Object","entries","printBundleSizes","fromEntries","key","value","undefined","hashes","fileNames","writeBundlesAsync","unstable_exportStaticAsync","includeMaps","exportServer","cssLinks","exportCssAssetsAsync","html","createTemplateHtmlFromExpoConfigAsync","scripts","modifyHtml","getVirtualFaviconAssetsAsync","fs","promises","writeFile","persistMetroAssetsAsync","assets","platform","outputDirectory","keys","exportAssetsAsync","writeAssetMapAsync","writeSourceMapsAsync","writeDebugHtmlAsync","writeMetadataJsonAsync","publicFolder","outputFolder","existsSync","copyAsync"],"mappings":"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"}